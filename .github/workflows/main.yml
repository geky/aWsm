# CI workflow
name: test
on: [push, pull_request]

env:
  # rust equivalent of -Werror
  RUSTFLAGS: --deny warnings
  # used during LLVM installation
  LLVM_VERSION: 9
  # URLs for WebAssembly libcs
  WASMCEPTION_URL: https://github.com/geky/aWsm/releases/download/wasmception-0.1/wasmception-0.1.tar.gz
  WASI_SDK_URL: https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-8/wasi-sdk-8.0-linux.tar.gz
  BOT_STATUSES: Z2VreS1ib3Q6ZDYwMDM1NWI0MTZiOWU4Y2NmMjRmZjQ4ODM2ZDI1NWQ3YjgyODJhYgo=

# job control
jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        libc: [wasmception, wasi-sdk]

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" bash $LLVM_VERSION
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$LLVM_VERSION 100
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-$LLVM_VERSION 100
          sudo apt install libc++-dev libc++abi-dev --yes
          # not really sure why we need to modify this
          PATH=/usr/bin:$PATH
          llvm-config --version

#      - name: Install wasmception
#        if: matrix.libc == 'wasmception'
#        run: |
#          sudo apt-get install libtinfo5 --yes
#          # TODO why is this needed?
#          sudo ln -s /usr/lib/x86_64-linux-gnu/libtinfo.so /usr/lib/x86_64-linux-gnu/libtinfo.so.6
#          ls /usr/lib/x86_64-linux-gnu

      - name: Get wasmception
        if: matrix.libc == 'wasmception'
        run: |
          wget $WASMCEPTION_URL -O wasmception.tar.gz
          mkdir -p wasmception
          tar xvfz wasmception.tar.gz --strip-components=1 -C wasmception

#          git submodule update --init --recursive
#          cd wasmception
#          make
#          cd ..
#          cp -r wasmception/sysroot wasmception/dist/sysroot

#      - name: Upload?
#        if: matrix.libc == 'wasmception'
#        uses: actions/upload-artifact@v1
#        with:
#          name: wasmception-1.0
#          path: wasmception/dist

#          wget $WASMCEPTION_URL -O wasmception.tar.gz
#          mkdir -p wasmception
#          tar xvfz wasmception.tar.gz --strip-components=1 -C wasmception

      - name: Get wasi-sdk
        if: matrix.libc == 'wasi-sdk'
        run: |
          wget $WASI_SDK_URL -O wasi-sdk.tar.gz
          mkdir -p wasi-sdk
          tar xvfz wasi-sdk.tar.gz --strip-components=1 -C wasi-sdk

#      - name: Compile
#        run: |
#          cargo build

#      - name: Preliminary tests
#        # note we skip code_benches, we run code_benches/run.py ourselves
#        # to pass explicit flags
#        run: |
#          cargo test -- --skip code_benches

      - name: Code benches
        run: |
          #./code_benches/run.py --debug --${{matrix.libc}} -o benchmarks.csv
          echo "ignore this,hello" >> benchmarks.csv
          echo "a,11" >> benchmarks.csv
          echo "b,13" >> benchmarks.csv
          echo "${{toJson(github)}}"

      - name: Results
        run: |
          BOT_STATUSES=$(base64 -d <<< "$BOT_STATUSES")

          NF=$(awk -F, 'NR==1 {print NF-1}' benchmarks.csv)
          for ((i=0; i<NF; i++))
          do
              # find total runtime
              NAME="${{matrix.libc}}-$(awk -F, -vi=$i 'NR==1 {gsub(/ /, "-"); print $(i+2)}' benchmarks.csv)"
              RUNTIME=$(awk -F, -vi=$i 'NR>1 {sum += $(i+2)} END {printf "%.3f\n",sum}' benchmarks.csv)

              # get previous?
              PREV=$(curl -sS -u "$BOT_STATUSES" \
                  https://api.github.com/repos/$GITHUB_REPOSITORY/status/master \
                  | jq -re "select(.sha != \"$GITHUB_SHA\")
                      | .statuses[] | select(.context == \"bench/$NAME\").description
                      | capture(\"Runtime: (?<runtime>[0-9\\\\.]+)\").runtime" \
                  || echo 0)

              echo NAME=$NAME
              echo RUNTIME=$RUNTIME
              echo PREV=$PREV

              # build status
              STATUS="Runtime: ${RUNTIME}s"
              if awk "BEGIN {exit! $PREV != 0}"
              then
                  echo "what"
                  STATUS="$STATUS ($(awk "BEGIN {printf \"%+.2f\",100*($RUNTIME-$PREV)/$PREV}")%)"
                  echo $STATUS
              fi

              # Post status
              curl -sS -u "$BOT_STATUSES" -X POST \
                  https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA \
                  -d "{
                      \"context\": \"bench/$NAME\",
                      \"state\": \"success\",
                      \"description\": \"$STATUS\",
                      \"target_url\": \"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"
                  }"
          done

